## Set default image, imageTag, and imagePullPolicy. mode is used to indicate the
## minio server mode, i.e. standalone or distributed.
## Distributed Minio ref: https://docs.minio.io/docs/distributed-minio-quickstart-guide
##
image:
    repository: "minio/minio"
    tag: "RELEASE.2018-06-29T02-11-29Z"
imagePullPolicy: "Always"
mode: ${component.minio.mode}

ingress:
  enabled: true

## Set default accesskey, secretkey, Minio config file path, volume mount path and
## number of nodes (only used for Minio distributed mode)
## Distributed Minio ref: https://docs.minio.io/docs/distributed-minio-quickstart-guide
##
accessKey: ${component.minio.access-key}
secretKey: ${component.minio.secret-key}
configPath: "/root/.minio"
mountPath: "/export"
replicas: 4

## loadBalancerIP for the Minio Service (optional, cloud specific)
## ref: http://kubernetes.io/docs/user-guide/services/#type-loadbalancer
##
# minioLoadBalancerIP:

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true

  ## minio data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ${component.minio.storage-class}
  accessMode: ReadWriteOnce
  size: ${component.minio.storage-size}

## Expose the Minio service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
serviceType: LoadBalancer
servicePort: ${component.minio.port}

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 512Mi
    cpu: 250m


## Create a bucket after minio install
##
# defaultBucket:
#  enabled: true
#  name: sample-data
#  policy: public

## https://docs.minio.io/docs/minio-bucket-notification-guide
##
minioConfig:
  aqmp:
    enable: false
    url: ""
    exchange: ""
    routingKey: ""
    exchangeType: ""
    deliveryMode: 0
    mandatory: false
    immediate: false
    durable: false
    internal: false
    noWait: false
    autoDeleted: false
  nats:
    enable: false
    address: ""
    subject: ""
    username: ""
    password: ""
    token: ""
    secure: false
    pingInterval: 0
    enableStreaming: false
    clusterID: ""
    clientID: ""
    async: false
    maxPubAcksInflight: 0
  elasticsearch:
    enable: false
    format: "namespace"
    url: ""
    index: ""
  redis:
    enable: ${component.minio.redis.enable}
    format: ${component.minio.redis.format}
    address: ${component.minio.redis.address}
    password: ${component.redis.password}
    key: ${component.minio.redis.key}
  postgresql:
    enable: false
    format: "namespace"
    connectionString: ""
    table: ""
    host: ""
    port: ""
    user: ""
    password: ""
    database: ""
  kafka:
    enable: false
    brokers: "null"
    topic: ""
  webhook:
    enable: false
    endpoint: ""
  mysql:
    enable: false
    format: "namespace"
    dsnString: ""
    table: ""
    host: ""
    port: ""
    user: ""
    password: ""
    database: ""
  mqtt:
    enable: false
    broker: ""
    topic: ""
    qos: 0
    clientId: ""
    username: ""
    password: ""
networkPolicy:
  enabled: false
  allowExternal: true

#!/bin/bash

KUBE="kubectl --context={{dns.domain}} --namespace={{component.bucket.namespace}}"
BUCKETHOST={{component.gitlab.name}}
BUCKET_INTERNAL_ENDPOINT={{component.bucket.endpoint.internal}}
BUCKET_TMP={{component.bucket.endpoint}}
BUCKET_ENDPOINT=${BUCKET_INTERNAL_ENDPOINT:-BUCKET_TMP}

# connectToBucketService
# Use a check-sleep-check loop to wait for the service to be available
connectToBucketService() {
  SECRETS=$($KUBE get secret {{component.bucket.secret}} -o json | jq '.data | map_values(@base64d)')
  BUCKET_ACCESS_KEY=$(echo $SECRETS | jq --raw-output '.accesskey')
  BUCKET_SECRET_KEY=$(echo $SECRETS | jq --raw-output '.secretkey')
  MC_COMMAND="mc config host add $BUCKETHOST $BUCKET_ENDPOINT $BUCKET_ACCESS_KEY $BUCKET_SECRET_KEY" ;
  # echo "${MC_COMMAND}"
  $MC_COMMAND ;
  STATUS=$? ;
  until [ $STATUS -eq 0 ] ;
  do
    sleep 1 ; # 1 second intervals between attempts
    $MC_COMMAND ;
    STATUS=$? ;
  done ;
  set -e ; # reset `e` as active
    return 0
}

# checkBucketExists ($bucket)
# Check if the bucket exists, by using the exit code of `mc ls`
checkBucketExists() {
  BUCKET=$1
    CMD=$(mc ls $BUCKETHOST/$BUCKET > /dev/null 2>&1)
    return $?
}

# createBucket ($bucket, $policy, $purge)
# Ensure bucket exists, purging if asked to
createBucket() {
  BUCKETBASE=$1
  POLICY=$2
  PURGE=$3
  BUCKET="{{component.gitlab.name}}-$BUCKETBASE"

  # Purge the bucket, if set & exists
  # Since PURGE is user input, check explicitly for `true`
  if [ $PURGE = true ]; then
    if checkBucketExists $BUCKET ; then
      echo "Purging bucket '$BUCKET'."
      set +e ; # don't exit if this fails
      mc rm -r --force $BUCKETHOST/$BUCKET
      set -e ; # reset `e` as active
    else
      echo "Bucket '$BUCKET' does not exist, skipping purge."
    fi
  fi

  # Create the bucket if it does not exist
  if ! checkBucketExists $BUCKET ; then
    echo "Creating bucket '$BUCKET'"
    mc mb $BUCKETHOST/$BUCKET
  else
    echo "Bucket '$BUCKET' already exists."
  fi

  # At this point, the bucket should exist, skip checking for existance
  # Set policy on the bucket
  echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
  mc policy set $POLICY $BUCKETHOST/$BUCKET
}

connectToBucketService
createBucket registry none false
createBucket git-lfs none false
createBucket runner-cache none false
createBucket uploads none false
createBucket artifacts none false
createBucket backups none false
createBucket packages none false
createBucket tmp none false
createBucket pseudo none false
createBucket mr-diffs none false

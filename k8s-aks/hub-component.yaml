---
version: 1
kind: component
meta:
  name: k8s-aks
  brief: Azure AKS
  source:
      dir: ../../components/k8s-aks

requires:
  - azure
provides:
  - kubernetes

lifecycle:
  verbs:
    - deploy
    - undeploy
  readyConditions:
    - dns: ${kubernetes.api.endpoint}
      url: https://${kubernetes.api.endpoint}
  options:
    random:
      bytes: 2048

parameters:
  - name: kubernetes.aks.cluster
    env: CLUSTER_NAME
    value: ${dns.name}
  - name: dns.domain
    env: DOMAIN_NAME
  - name: cloud.region
    env: TF_VAR_location

  - name: component.kubernetes
    parameters:
    - name: serviceaccount
      value: asi
      env: SERVICE_ACCOUNT
    - name: aks
      parameters:
      - name: resourceGroupName
        env: TF_VAR_aks_resource_group_name
        value: ${cloud.azureResourceGroupName}

  - name: terraform.bucket.name
    env: STATE_BUCKET
  - name: terraform.bucket.region
    env: STATE_REGION
  - name: cloud.azureResourceGroupName
    env: CLOUD_RESOURCE_GROUP

outputs:
  - name: cloud.kind
    value: azure
  - name: cloud.region
  - name: cloud.availabilityZone
    value: 1
  # we won't be able to handle a cluster in the resource group that's
  # different from the cloud account resource group though
  - name: cloud.azureResourceGroupName
    # value: ${component.kubernetes.aks.resourceGroupName}
  - name: dns.domain
  - name: dns.name
    fromTfVar: dns_name
  - name: dns.baseDomain
    fromTfVar: dns_base_domain
  - name: kubernetes.aks.cluster
  - name: kubernetes.flavor
    value: aks
  - name: kubernetes.api.host
    fromTfVar: fqdn
  - name: kubernetes.api.port
    value: 443
  - name: kubernetes.api.endpoint
    value: ${kubernetes.api.host}:${kubernetes.api.port}
  - name: kubernetes.api.caCert
    fromTfVar: api_ca_crt
  - name: kubernetes.api.token
    fromTfVar: token/base64

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: ${component.kubernetes-dashboard.name}
  name: ${component.kubernetes-dashboard.name}
  namespace: ${component.kubernetes-dashboard.namespace}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: ${component.kubernetes-dashboard.name}
  template:
    metadata:
      labels:
        k8s-app: ${component.kubernetes-dashboard.name}
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      #priorityClassName: system-cluster-critical
      containers:
      - name: kubernetes-dashboard
        image: kubernetesui/dashboard:${component.kubernetes-dashboard.version}
        resources:
          limits:
            cpu: 500m
            memory: 300Mi
          requests:
            cpu: 50m
            memory: 100Mi
        ports:
        - containerPort: 9090
          protocol: TCP
        args:
        - --namespace=${component.kubernetes-dashboard.namespace}
        - --enable-skip-login=true
        - --disable-settings-authorizer=true
        # Uncomment the following line to manually specify Kubernetes API server Host
        # If not specified, Dashboard will attempt to auto discover the API server and connect
        # to it. Uncomment only if the default does not work.
        # - --apiserver-host=http://my-address:port
        volumeMounts:
          # Create on-disk volume to store exec logs
        - mountPath: /tmp
          name: tmp-volume
        livenessProbe:
          httpGet:
            path: /
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: tmp-volume
        emptyDir: {}
      serviceAccountName: ${component.kubernetes-dashboard.name}
      nodeSelector:
        "beta.kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: "CriticalAddonsOnly"
        operator: "Exists"

---
kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: ${component.kubernetes-dashboard.namespace}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: dashboard-metrics-scraper
  template:
    metadata:
      labels:
        k8s-app: dashboard-metrics-scraper
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'
    spec:
      containers:
      - name: dashboard-metrics-scraper
        image: kubernetesui/metrics-scraper:v1.0.3
        ports:
        - containerPort: 8000
          protocol: TCP
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /
            port: 8000
          initialDelaySeconds: 30
          timeoutSeconds: 30
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 1001
          runAsGroup: 2001
      serviceAccountName: ${component.kubernetes-dashboard.name}
      nodeSelector:
        "beta.kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      volumes:
      - name: tmp-volume
        emptyDir: {}

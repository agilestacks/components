# RBAC authn and authz
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elasticsearch-logging
  namespace: ${component.efk.namespace}
  labels:
    k8s-app: elasticsearch-logging
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - ""
  resources:
  - "services"
  - "namespaces"
  - "endpoints"
  verbs:
  - "get"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: ${component.efk.namespace}
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
- kind: ServiceAccount
  name: elasticsearch-logging
  namespace: ${component.efk.namespace}
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: elasticsearch-logging
  apiGroup: ""
---
# Elasticsearch deployment itself
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-logging
  namespace: ${component.efk.namespace}
  labels:
    k8s-app: elasticsearch-logging
    version: ${component.efk.elastic.version}
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  serviceName: elasticsearch-logging
  replicas: ${component.efk.elastic.masters}
  selector:
    matchLabels:
      k8s-app: elasticsearch-logging
      version: ${component.efk.elastic.version}
  template:
    metadata:
      labels:
        k8s-app: elasticsearch-logging
        version: ${component.efk.elastic.version}
        es-role: master
    spec:
      serviceAccountName: elasticsearch-logging
      securityContext:
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: es-role
                operator: In
                values:
                - master
            topologyKey: kubernetes.io/hostname
      containers:
      - image: docker.elastic.co/elasticsearch/elasticsearch-oss:${component.efk.elastic.version}
        name: elasticsearch-logging
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 20
          periodSeconds: 10
        resources:
          # need more cpu upon initialization, therefore burstable class
          limits:
            cpu: 4
            memory: 4Gi
          requests:
            cpu: 100m
            memory: 2Gi
        ports:
        - containerPort: 9200
          name: db
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        volumeMounts:
        - name: es-config
          mountPath: /usr/share/elasticsearch/config/log4j2.properties
          subPath: log4j2.properties
        - name: es-config
          mountPath: /usr/share/elasticsearch/config/jvm.options
          subPath: jvm.options
        - name: es-config
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          subPath: elasticsearch.yml
        - name: elasticsearch-data
          mountPath: /data
        env:
        - name: DISCOVERY_SERVICE
          value: elasticsearch-discovery.${component.efk.namespace}.svc.cluster.local
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: ES_JAVA_OPTS
          valueFrom:
            configMapKeyRef:
              name: es-env
              key: es-java-opts
      volumes:
      - name: es-config
        configMap:
          name: es-config
      # Elasticsearch requires vm.max_map_count to be at least 262144.
      # If your OS already sets up this number to a higher value, feel free
      # to remove this init container.
      initContainers:
      - name: fixup-volume
        image: alpine:3.10
        command: ['/bin/ash', '-c', 'mkdir -p /data/elasticsearch && mkdir -p /data/log && chown -R 1000:1000 /data']
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /data
      - name: elasticsearch-logging-init
        image: alpine:3.10
        command: ["/sbin/sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${component.efk.storageSize}
      storageClassName: ${component.efk.storageClass}

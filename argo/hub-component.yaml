---
version: 1
kind: component
meta:
  name: argo
  brief: The workflow engine for Kubernetes
  source:
    dir: ../../components/argo

requires:
  - kubernetes
  - ingress
provides:
  - argo
  - argo-events

parameters:
- name: component.ingress.fqdn
- name: component.ingress.ssoUrlPrefix
- name: terraform.bucket.name
  env: STATE_BUCKET
- name: terraform.bucket.region
  env: STATE_REGION
- name: dns.domain
  env: DOMAIN_NAME
- name: cloud.region
  kind: user
  env: AWS_DEFAULT_REGION
- name: component.bucket.endpoint
  env: ENDPOINT
  empty: allow
- name: component.bucket.secret.name
  env: SECRET_NAME
  empty: allow
- name: component.argo
  parameters:
  - name: name
    value: argo
    env: TF_VAR_component
  - name: instanceId
    value: axis
  - name: replicas
    value: 1
  - name: namespace
    value: argoproj
    env: TF_VAR_namespace
  - name: repo.bucket.name
    value: ${terraform.bucket.name}
    env: TF_VAR_bucket_name
  - name: repo.secret.accessKeyRef
    value: accessKey
    env: TF_VAR_access_key_ref
  - name: repo.secret.secretKeyRef
    value: secretKey
    env: TF_VAR_secret_key_ref
  - name: repo.bucket.region
    value: ${terraform.bucket.region}
    env: TF_VAR_bucket_region
  - name: repo.bucket.insecure
    value: "false"
  - name: repo.bucket.keyPrefix
    value: ""
    empty: allow
  - name: serviceAccount
    value: argo
  - name: ingress.baseDomain
    value: ${component.ingress.ssoUrlPrefix}.${dns.domain}
  - name: chart.version
    value: '2.1.1'
    env: CHART_VERSION
outputs:
- name: component.argo.repo.secret.name
  brief: Kubenetes secret that holds access and secret key info
  fromTfVar: secret_name
- name: component.argo.repo.secret.accessKeyRef
  brief: Kubenetes secret data field that holds Access Key Id
  value: ${component.argo.repo.secret.accessKeyRef}
- name: component.argo.repo.secret.secretKeyRef
  brief: Kubenetes secret data field that holds Secret Key
  vakue: ${component.argo.repo.secret.secretKeyRef}
- name: component.argo.repo
  brief: Argo backend S3 or Minio
  value: s3
- name: component.argo.repo.bucket.name
  brief: Argo backend bucket name
  value: ${component.argo.repo.bucket.name}
- name: component.argo.repo.bucket.region
  brief: Argo backend bucket region
  value: ${component.argo.repo.bucket.region}
- name: component.argo.repo.bucket.endpoint
  brief: Argo backend bucket service endpoint
  fromTfVar: endpoint
- name: component.argo.repo.bucket.insecure
  brief: Argo backend bucket insecure
  value: ${component.argo.repo.bucket.insecure}
- name: component.argo.repo.bucket.keyPrefix
  brief: Argo backend bucket key
  value: ${component.argo.repo.bucket.keyPrefix}
- name: component.argo.repo.iam.username
  brief: Name of the IAM user who have access to artifacts repository
  fromTfVar: iam_user_name
- name: component.argo.repo.iam.arn
  brief: ARN of the IAM user who have access to artifacts repository
  fromTfVar: iam_user_arn
- name: component.argo.ingress
  brief: URL to connect to argo-ui
  value: ${component.argo.name}.${component.argo.ingress.baseDomain}
- name: component.argo.namespace
  brief: Namespace where Argo has been installed
  value: ${component.argo.namespace}
- name:  component.argo.events.webhook.service.url
  value: webhook.${component.argo.namespace}.svc.cluster.local:8080
- name:  component.argo.events.webhook.service.name
  value: webhook
- name:  component.argo.events.webhook.service.port
  value: 8080

templates:
  files:
  - "*.template"
  - "events/*.template"

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "gitlab-ce.fullname" . }}
  labels:
    app: {{ template "gitlab-ce.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  db_host: ${component.postgresql.url}
  db_name: gitlab
  ## This is used by GitLab Omnibus as the primary means of configuration.
  ## ref: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template
  ##
  gitlab_omnibus_config: |
    external_url ENV['EXTERNAL_URL'];
    nginx['listen_port'] = 80
    nginx['listen_https'] = false
    nginx['proxy_set_headers'] = {
      "X-Forwarded-Proto" => "https"
    }
    root_pass = ENV['GITLAB_ROOT_PASSWORD'];
    gitlab_rails['initial_root_password'] = root_pass unless root_pass.to_s == '';
    postgresql['enable'] = false;
    registry_external_url 'https://git.${dns.domain}:4567';
    registry_nginx['listen_port'] = 4567
    registry_nginx['listen_https'] = false
    registry_nginx['proxy_set_headers'] = {
    	"X-Forwarded-Proto" => "https"
    }
    gitlab_rails['db_host'] = ENV['DB_HOSTNAME'];
    gitlab_rails['db_password'] = ENV['DB_PASSWORD'];
    gitlab_rails['db_username'] = ENV['DB_USER'];
    gitlab_rails['db_database'] = ENV['DB_DATABASE'];
    redis['enable'] = false;
    gitlab_rails['redis_host'] = ENV['GITLAB_CE_REDIS_SERVICE_HOST'];
    gitlab_rails['redis_password'] = ENV['REDIS_PASSWORD'];
    unicorn['worker_processes'] = 2;
    manage_accounts['enable'] = true;
    manage_storage_directories['manage_etc'] = false;
    gitlab_shell['auth_file'] = '/gitlab-data/ssh/authorized_keys';
    git_data_dir '/gitlab-data/git-data';
    gitlab_rails['shared_path'] = '/gitlab-data/shared';
    gitlab_rails['uploads_directory'] = '/gitlab-data/uploads';
    gitlab_ci['builds_directory'] = '/gitlab-data/builds';
    gitlab_rails['omniauth_enabled'] = true

    # Must match the args.name (!) of our configured omniauth provider:
    gitlab_rails['omniauth_allow_single_sign_on'] = ['ssoagilestacks']

    # By default, third-party authentication results in a newly created
    # user which needs to be unblocked by an admin. Disable this
    # additional safety mechanism and directly create users:
    gitlab_rails['omniauth_block_auto_created_users'] = false

    gitlab_rails['omniauth_providers'] = [
      {
        name: 'openid_connect',  # identifies the omniauth gem to use
        label: 'OIDC',
        args: {
          # The name shows up in the GitLab UI in title-case, i.e. “AgilestacksSSO”,
          # and must match the name in client_options.redirect_uri below
          # and omniauth_allow_single_sign_on above.
          #
          # NOTE that if you change the name after users have already
          # signed up through the provider, you will need to update the
          # “identities” PostgreSQL table accordingly:
          # echo "UPDATE identities SET provider = 'newdex' WHERE \
          #   provider = 'ssoagilestacks';" | gitlab-psql gitlabhq_production
          'name': 'ssoagilestacks',

          # Scope must contain “email”.
          'scope': ['openid', 'profile', 'email'],

          # Discover all endpoints from the issuer, specifically from
          # https://dex.example.net:5554/dex/.well-known/openid-configuration
          'discovery': true,

          # Must match the issuer configured in dex:
          # Note that http:// URLs did not work in my tests; use https://
          'issuer': '${component.dex.issuer}',

          'client_options': {
            # identifier, secret and redirect_uri must match a
            # configured client in dex.
            'identifier':   'gitlab-oidc-client',
      	    'secret': 'CHANGEMETOARANDOMLYGENERATEDSTRING',
            'redirect_uri': 'https://git.${dns.domain}/users/auth/ssoagilestacks/callback'
          }
        }
      }
    ]

